/// Position.
@mixin position($position, $top, $right, $bottom, $left) {
  $position: if(type-of($position) == 'string', unquote($position), inspect($position));
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin absolute($top, $right: $top, $bottom: $top, $left: $right) {
        @include position('absolute',$top, $right, $bottom, $left);
}

@mixin fixed($top, $right: $top, $bottom: $top, $left: $right) {
        @include position('fixed', $top, $right, $bottom, $left);
}

@mixin relative($top, $right: $top, $bottom: $top, $left: $right) {
        @include position('relative', $top, $right, $bottom, $left);
}

/// Responsive manager.
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Font mixins.

/// Font size in px and rem
/// @access public
/// @param {String} $size - font size in px
@mixin font-size($size) {
  font-size: $size;
  font-size: rem(strip-units($size));
}

@mixin font-category {
  font-family: $font-category;
  text-transform: uppercase;
  letter-spacing: 1px;
}

@mixin font-meta {
  font-family: $font-meta;
}

@mixin font-heading {
  font-family: $font-heading;
}

@mixin mdicon {
  /* use !important to prevent issues with browser extensions that change fonts */
  display: inline-block;
  font-family: 'mdicon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  vertical-align: middle;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// Responsive typography scale.
/// @access public
/// @param {String} $scale - scale name
/// @param {String} $unit - size unit
/// @param {Number} $factor - scale factor
/// @requires $breakpoints
/// @requires $typography-scale
@mixin typography-scale($scale, $unit: 'rem', $factor: 1) {
  $get-scale: map-get($typography-scale, $scale);
  @if ($unit == 'rem') {
    $unit: 1rem;
  } @else {
    $unit: 1em;
  }

  @if $get-scale {
    @each $breakpoint, $properties in $get-scale {
      @if ($breakpoint == 'xs') {
          font-size: nth($properties, 1) * $factor * $unit;
          line-height: nth($properties, 2);
        } @else {
          @include respond-to( $breakpoint ) {
            font-size: nth($properties, 1) * $factor * $unit;
            line-height: nth($properties, 2);
          }
        }
    }

  } @else {
    @error 'No value found for `#{$scale}`. '
         + 'Please make sure it is defined in `$typography-scale` map.';
  }
}

/// Grid modifier.
/// @param {Integer} $gutter - Gutter
@mixin grid-modifier($gutter) {
  .row,
  &.row {
    margin-left: -($gutter/2);
    margin-right: -($gutter/2);
  }

  .row--space-between,
  &.row--space-between {
    margin-top: -($gutter/2);
    margin-bottom: -($gutter/2);
  }

  & [class*="col-"] {
    padding-left: $gutter/2;
    padding-right: $gutter/2;
  }

  .row--space-between > [class*="col-"],
  &.row--space-between > [class*="col-"] {
    padding-left: $gutter/2;
    padding-right: $gutter/2;
    padding-top: $gutter/2;
    padding-bottom: $gutter/2;
  }
}

/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// Change opacity of a color
/// @access public
/// @param {Color} $color
/// @param {Opacity} $opacity
/// @return {Color}
@function color-opacity($color, $opacity: 0.3) {
  @return rgba($color, $opacity);
}

/// Scrim background mixin
/// @access public
/// @param {Deg} $direction
@mixin scrim($direction: 0deg) {
  background-color: transparent;
  @include background-image(linear-gradient($direction,
    hsl(0, 0%, 0%) 0%,
    hsla(0, 0%, 0%, 0.917) 5.3%,
    hsla(0, 0%, 0%, 0.834) 10.6%,
    hsla(0, 0%, 0%, 0.753) 15.9%,
    hsla(0, 0%, 0%, 0.672) 21.3%,
    hsla(0, 0%, 0%, 0.591) 26.8%,
    hsla(0, 0%, 0%, 0.511) 32.5%,
    hsla(0, 0%, 0%, 0.433) 38.4%,
    hsla(0, 0%, 0%, 0.357) 44.5%,
    hsla(0, 0%, 0%, 0.283) 50.9%,
    hsla(0, 0%, 0%, 0.213) 57.7%,
    hsla(0, 0%, 0%, 0.147) 65%,
    hsla(0, 0%, 0%, 0.089) 72.9%,
    hsla(0, 0%, 0%, 0.042) 81.4%,
    hsla(0, 0%, 0%, 0.011) 90.6%,
    hsla(0, 0%, 0%, 0) 100%
  ));
}

/// Box shadow mixin
@mixin shadow($level: 1) {
  @if $level == 1 {
    box-shadow: $shadow-lvl1;
  }
  @else if $level == 2 {
    box-shadow: $shadow-lvl2;
  }
  @else if $level == 3 {
    box-shadow: $shadow-lvl3;
  }
  @else if $level == 4 {
    box-shadow: $shadow-lvl4;
  }
  @else if $level == 5 {
    box-shadow: $shadow-lvl5;
  }
  @else if $level == 6 {
    box-shadow: $shadow-lvl5;
  }
}

/// Reset link style
@mixin reset-link() {
  color: inherit;
  text-decoration: none;

  &:hover,
  &:active,
  &:focus {
    color: inherit;
    text-decoration: none;
  }
}

/// Text truncate
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/// Hexagon
@mixin hexagon($width: 50px, $backgroundColor: #eee, $shadow: none) {
  $scaleFactor: 0.577350269189626; /*this smushes a square into a 60deg/120deg rhombus*/
  $height: $width/1.732050807568877;

  position: relative;
  width: $width; 
  height: $height;
  margin-top: $width/3;
  margin-bottom: $width/3;
  background-color: $backgroundColor;
  box-shadow: $shadow;

  &:before,
  &:after {
    content: "";
    position: absolute;
    width: $width/1.414213562373095;
    height: $width/1.414213562373095;
    left: $height/4; /*for some reason this 1px correction is needed */
    background-color: inherit;
    box-shadow: $shadow;
    @include transform(scaleY(#{$scaleFactor}) rotate(-45deg));
  }

  &:before {
    top: - $width/1.414213562373095/2;
  }

  &:after {
    bottom: - $width/1.414213562373095/2;
  }

  /*cover up extra shadows*/
  > .hex-inner {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: $width;
    height: $height;
    z-index: 1;
    background: inherit;
  }
}

/// Z-index
@function z($layer) {
  @if not map-has-key($z-layers, $layer) {
    @warn "No layer found for `#{$layer}` in $z-layers map. Property omitted.";
  }

  @return map-get($z-layers, $layer);
}